import { ChangeEventHandler, useRef, useState } from 'react'
import Head from 'next/head'
import { Inter } from '@next/font/google'
import useSound from 'use-sound'

import styles from 'src/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  // const [audioFile, setAudioFile] = useState<File | null>(null)
  // const [play] = useSound(audioFile ? URL.createObjectURL(audioFile) : '')

  // const isPlayButtonDisabled = !!audioFile

  // console.log({ audioFile, isPlayButtonDisabled })

  // const onPlayButtonClick = () => {
  // console.log('elo')
  // if (!audioFile) throw new Error('Audio file not selected')

  // const audio = new Audio(URL.createObjectURL(audioFile))
  // console.log({ audioFile, audio })
  // audio.play()

  // play()
  // }

  const [audioFile, setAudioFile] = useState<File | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)

  const audioElementRef = useRef<HTMLAudioElement | null>(null)

  const handleFileSelection: ChangeEventHandler<HTMLInputElement> = (event) => {
    if (!event.target.files) throw new Error('File not available')

    const selectedFile = event.target.files[0]
    setAudioFile(selectedFile)
  }

  const play = async () => {
    if (!audioElementRef.current) throw new Error('audioElementRef is empty')

    await audioElementRef.current?.play()
    setIsPlaying(true)
  }

  const pause = async () => {
    if (!audioElementRef.current) throw new Error('audioElementRef is empty')

    audioElementRef.current?.pause()
    setIsPlaying(false)
  }

  const toggle = async () => {
    isPlaying ? await pause() : await play()
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <h1 className='text-3xl font-bold underline'>Hello world!</h1>
        {/* <input
          type='file'
          id='music-file-input'
          onChange={(event) => {
            if (!event.target.files) throw new Error('not a file!')

            setAudioFile(event.target.files[0])
          }}
        />
        <button
          className={`${
            isPlayButtonDisabled ? 'cursor-pointer' : 'cursor-not-allowed'
          }`}
          disabled={isPlayButtonDisabled}
          onClick={onPlayButtonClick}
        >
          Play
        </button> */}
        <input type='file' onChange={handleFileSelection} />
        {!!audioFile && (
          <>
            <audio
              ref={audioElementRef}
              // autoPlay
              // style={{ display: 'none' }}
              src={URL.createObjectURL(audioFile)}
              // controls={isPlaying}
              // onPlay={() => {
              //   setIsPlaying(true)
              // }}
              // onCanPlay={() => {
              //   setIsPlaying(true)
              // }}
            />
            <button onClick={toggle}>{isPlaying ? 'Pause' : 'Play'}</button>
          </>
        )}
      </main>
    </>
  )
}
